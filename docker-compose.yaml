version: "3"
services:
 mysql:
  image: "mysql:8"
  container_name: mysql
  restart: unless-stopped
  environment:
   MYSQL_DATABASE: mediscreenapp
#   MYSQL_USER: "root"
   MYSQL_ROOT_PASSWORD: "sqlpassword!"
  ports:
   - "5000:3306"
  volumes:
   - mysql_data:/var/lib/mysql#
#  networks:
#   - spring-cloud-network

 mongodb:
  image: "mongo:4"
  container_name: mongodb
#  command: [--auth]
#  environment:
#   - spring.data.mongodb.uri=mongodb://mongodb:27017
#   - MONGO_INITDB_ROOT_USERNAME=root
#   - MONGO_INITDB_ROOT_PASSWORD=root
  ports:
   - "27017:27017"
  volumes:
   - mongodb_data:/data/db
#  networks:
#   - spring-cloud-network

 patient:
  depends_on:
   - mysql
  image: mediscreen-patient
  container_name: mediscreen-patient
  ports:
   - "8081:8081"
  restart: always
  environment:
   SPRING_APPLICATION_JSON: '{
       "spring.datasource.url"  : "jdbc:mysql://mysql:3306/mediscreenapp?serverTimezone=UTC",
       "spring.datasource.username" : "root",
       "spring.datasource.password" : "sqlpassword!",
       "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL8Dialect",
       "spring.jpa.hibernate.ddl-auto" : "create-drop"
     }'
#  networks:
#   - spring-cloud-network

 patientHistory:
  depends_on:
   - mongodb
  image: mediscreen-patienthistory
  container_name: mediscreen-patienthistory
  ports:
   - "8082:8082"
  environment:
   - "spring.data.mongodb.database=mediscreenpatienthistory"
   - "spring.data.mongodb.host=mongodb"
#  networks:
#   - spring-cloud-network

 report:
  image: mediscreen-report
  container_name: mediscreen-report
#  links:
#   - patient
#   - patientHistory
  environment:
   - "mediscreen-patient.url.cross=http://mediscreen-patient:8081"
   - "mediscreen-patientHistory.url.cross=http://mediscreen-patientHistory:8082"
  ports:
   - "8083:8083"
#  networks:
#   spring-cloud-network: {}


 ui:
#  build: ./mediscreen-ui
#  links:
#   - patient
#   - patientHistory
#   - report
  image: mediscreen-ui
  container_name: mediscreen-ui
  ports:
   - "8080:8080"
#  networks:
#   - spring-cloud-network

volumes:
 mysql_data:
 mongodb_data:

#networks:
# spring-cloud-network:
##  driver: bridge
#  external: true
#  name: host